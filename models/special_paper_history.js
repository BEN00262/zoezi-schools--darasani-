/*
  This snippet has been generated by johnnesta2018@gmail.com
*/

const mongoose = require("mongoose")

const specialPaperHistory = new mongoose.Schema({
    currentPage: {
        type: Number,
        required: true
    },

    paperID: {
        type: mongoose.Types.ObjectId,
        ref: 'special_paper'
    },

    // KCPE | anything else
    gradeName: {
        type: String,
        required: true
    },

    // 2018 | Model Paper 1
    category: {
        type: String,
        required: true
    },

    // Past Paper(s) | Model Paper(s)
    secondTier: {
        type: String,
        required: true
    },

    // English | Kiswahili
    subject: {
        type: String,
        required: true
    },

    // should link to the person
    // its not really required for the new way of data handling :)
    // for migration only ( not used for anything else now )
    // we need this btw :) for easy accessing from the schools --> will work with the assumptions that we have them
    
    userID: {
        type: String,
    },

    studentID: {
        type: String,
        required: true
    },

    subsubAccountID: {
        type: String,
        required: true
    },

    // used to avoid saving the same tree at the same time
    historyHash: {
        type: String,
    },

    // only relevant if the paper was timed
    isTimed: {
        type: Boolean,
        default: false,
    },

    // the time is in milliseconds
    // we can also use this to detect if the paper was being done in history mode
    remainingTime: {
        type: Number,
        default: 0
    },

    compSubQuestionPage: {
        type: Number,
        required: true
    },
    isMarked: {
        type: Boolean,
        default: false
    },

    attemptTree: {
        subject: {
            type: String,
            required: true
        },
        score: {
            passed: {
                type: Number,
                required: true
            },
            total: {
                type: Number,
                required: true
            }
        },
        pages: [{
            page: {
                type: Number,
                required: true
            },

            content: [{

                // used in the rendering of the question in the frontend portion
                questionType: {
                    type: String,
                    enum: ["normal", "oldversion", "comprehension"],
                    default: "normal"
                },
        
                // actual content of the question
                content: {
                    // for old version and normal questions
                    status: {
                        type: Boolean,
                        default: false
                    },
        
                    // a reference to the actual question
                    question: {
                        type: mongoose.Types.ObjectId,
                        ref: 'ques',
                        required: true
                    },
        
                    // old version question
                    attempted_option: {
                        type: String
                    },
        
                    // normal question 
                    attempted_options: [{
                        optionID: {
                            type: String,
                            required: true
                        },

                        // used as a fallback just incase the id of the selected option changes | relies on the order of the 
                        // options to be retained
                        optionIndex: {
                            type: Number,
                            required: true
                        }
                    }],
        
                    children: [{
                        status: {
                            type: Boolean,
                            required: true
                        },
        
                        // an id to the sub question but wont be resolved 
                        question: {
                            type: String,
                            required: true
                        },
        
                        // the options attempted for the sub questions
                        attempted_options: [{
                            optionID: {
                                type: String,
                                required: true
                            },
                            
                            // used as a fallback just incase the id of the selected option changes | relies on the order of the 
                            // options to be retained
                            optionIndex: {
                                type: Number,
                                required: true
                            }
                        }],
                    }]
                },
            }],
        }]
    }
}, { timestamps: true }); // stores the createdAt and the updated time yeeey

module.exports = mongoose.model("special_paper_history",specialPaperHistory)